{
  "$schema": "../../../../../discovery/schemas/contract.v2.schema.json",
  "description": "Manages rollup state commitments and general rollup configuration, lists Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commitments) and Challengers submitting fraud proofs.",
  "ignoreMethods": [
    // Execution reverted
    "proxiableUUID"
  ],
  "ignoreInWatchMode": [
    "firstUnresolvedNode",
    "latestConfirmed",
    "latestNodeCreated"
  ],
  "fields": {
    "confirmPeriodBlocks": {
      "description": "Challenge period. (Number of blocks until a node is confirmed)."
    },
    "wasmModuleRoot": {
      "description": "Root hash of the WASM module used for execution, like a fingerprint of the L2 logic. Can be associated with ArbOS versions.",
      "returnType": "(ArbOsWasmModuleRoot)"
    },
    "setValidatorCount": {
      "description": "EventCount: Increments on validator change.",
      "handler": {
        "type": "eventCount",
        "topics": [
          // event OwnerFunctionCalled(uint256 indexed id);
          "0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e",
          // id == 6 is emitted inside setValidator()
          "0x0000000000000000000000000000000000000000000000000000000000000006"
        ]
      }
    },
    "challenges": {
      "description": "List of started challenges from Events.",
      "handler": {
        "type": "stateFromEvent",
        "event": "RollupChallengeStarted",
        "returnParams": [
          "challengeIndex",
          "asserter",
          "challenger",
          "challengedNode"
        ]
      }
    },
    "validators": {
      "target": {
        "role": "Validator",
        "permissions": [
          {
            "type": "propose",
            "description": "can submit new state roots to the RollupProxy contract on the host / settlement chain."
          },
          {
            "type": "challenge",
            "description": "can challenge state roots on the host / settlement chain."
          }
        ]
      },
      "handler": {
        "type": "arbitrumActors",
        "actorType": "validator"
      }
    }
  }
}
